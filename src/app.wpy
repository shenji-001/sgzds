<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore, connect } from 'wepy-redux'
import configStore from './store'
// import { connect } from 'wepy-redux'
const Utils = require('./utils/util.js')
// import io from 'weapp.socket.io'
const store = configStore()
setStore(store)
@connect({
  token (state) {
    return state.loginPhone.token
  }
})
// @connect({
//   token (state) {
//     return state.loginPhone.token || state.login.token
//   }
// }, {
// })
export default class extends wepy.app {
  constructor () {
    // this is not allowed before super()
    super()
    this.use('requestfix')
      // 拦截request请求
    this.intercept('request', {
      // 发出请求时的回调函数
      config (p) {
        p.header.Authorization = 'Bearer ' + this.globalData.token
        // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
        p.timestamp = +new Date()
        console.log('config request: ', p)
        // 必须返回OBJECT参数对象，否则无法发送请求到服务端
        return p
      },

      // 请求成功后的回调函数
      success (p) {
        // 可以在这里对收到的响应数据对象进行加工处理
        console.log('request success: ', p)
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      // 请求失败后的回调函数
      fail (p) {
        console.log('request fail: ', p)
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      // 请求完成时的回调函数(请求成功或失败都会被执行)
      complete (p) {
        if (p && p.data && p.data.token) {
          this.globalData.token = p.data.token
        }
        console.log('request complete: ', p)
      }
    })
  }
  config = {
    pages: [
      'pages/caseList', // 案件列表
      'pages/login', // 登陆页
      // 'pages/index', // demo页
      // 'pages/description',  // 流程页
      'pages/metaricalDetail', // 案件详情
      'pages/showMetarical', // 案件详情
      'pages/upload', // 上传页
      'pages/sign', // 上传页
      // 'pages/baseMban', // 基本模版页h5Conteiner
      'pages/h5Conteiner',
      'pages/video' // 视屏页
    ],
    permission: {
      "scope.userLocation": {
        "desc": "请授权经纬度" // 高速公路行驶持续后台定位
      }
    },
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '太平智定损',
      navigationBarTextStyle: 'black',
      navigationStyle: 'custom'
    }
  }

  globalData = {
    userInfo: null,
    token: ''
  }
  data = {
    // socket: ''
  }
  // constructor () {
  //   super()
  //   // this.use('requestfix')
  // }
  onHide(){
      let pages = getCurrentPages();
      if(pages['0'].route !== 'pages/caseList'){
        wx.redirectTo({
          url:'caseList'
        })
    }
}
  onLaunch () {
    Utils.checkSystemInfo(this)
    if (wx.canIUse('getUpdateManager')) {
      const updateManager = wx.getUpdateManager()
      updateManager.onCheckForUpdate(function (res) {
        console.log('onCheckForUpdate====', res)
        // 请求完新版本信息的回调
        if (res.hasUpdate) {
          console.log('res.hasUpdate====')
          updateManager.onUpdateReady(function () {
            wx.showModal({
              title: '更新提示',
              content: '新版本已经准备好，是否重启应用？',
              success: function (res) {
                console.log('success====', res)
                // res: {errMsg: "showModal: ok", cancel: false, confirm: true}
                if (res.confirm) {
                  // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
                  updateManager.applyUpdate()
                }
              }
            })
          })
          updateManager.onUpdateFailed(function () {
            // 新的版本下载失败
            wx.showModal({
              title: '已经有新版本了哟~',
              content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~'
            })
          })
        }
      })
    }
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }
  onLoad() {
    wx.onMemoryWarning(function(res) {
      console.log('onMemoryWarningReceive')
      wx.setStorageSync('onMemoryWarningReceive', JSON.stringify(res));
    })
    // this.createConnect()
  }
  // createConnect() {
  //   const socket = (this.socket = io('http://192.168.16.90:8001/'))
  //   socket.connect()
  //   // socket.emit('add')
  //   socket.on('connect', () => {
  //     debugger
  //   })
  // }
  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
